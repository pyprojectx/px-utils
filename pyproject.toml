[project]
name = "px-utils"
version = "1.0.0.dev"
description = "Build utilities python projects"
license = { text = "MIT" }
authors = [{ name = "Houbie", email = "ivo@houbrechts-it.be" }]
readme = "README.md"
urls = { homepage = "https://github.com/pyprojectx/px-utils" }

keywords = ["build", "pyprojectx"]
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.8"

dependencies = []

[tool.pdm.build]
buildlocked = true
[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.4.3",
    "pytest-mock>=3.12.0",
]

[project.scripts]
pmkdirs = "px_utils.cli:pmkdirs"
pcp = "px_utils.cli:pcp"
pmv = "px_utils.cli:pmv"
prm = "px_utils.cli:prm"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
line-length = 120
select = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "ICN", "INP", "NPY", "PD", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
extend-select = ["I"]
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "ICN", "INP", "NPY", "PD", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
ignore = ["D100", "D102", "D103", "D104", "D105", "D213", "D203", "T201", "TRY003", "EM102", "COM812", "S602", "S603", "S604", "S605", "S607", "PTH207"]
[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "SLF001"]

[tool.pyprojectx]
pdm = { requirements = ["pdm==2.10.1"], post-install = "pw@pdm plugin add pdm-buildlocked && pw@pre-commit install" }
pre-commit = "pre-commit==3.5.0"
px-utils = "-e ."

[tool.pyprojectx.aliases]
install = "pdm install"
update = "pdm update"
outdated = "pdm update --outdated"
clean = "@px-utils: prm build dist .pytest_cache .coverage .ruff_cache .pdm-python .pdm-build"
clean-all = [
    "pw@clean",
    "@px-utils: prm .venv .pyprojectx"
]
test = "pdm run pytest tests"
format = "pre-commit run ruff-format --all-files; pre-commit run ruff --all-files"
lint = "pre-commit run ruff-format --all-files && pre-commit run ruff --all-files"
check = [
    "pw@lint",
    "pw@test"
]
build = [
    "pw@install",
    "pw@check",
    "pw@pdm build"
]

# used in github actions:
publish = "pdm publish --username __token__"
prep-release = """\
# cleanup
rm .changelog.md
# extract version from tag
RELEASE_VERSION="${GITHUB_REF_NAME}"
# replace __version__ in pyproject.toml
sed -i -e "s/1.0.0.dev/${RELEASE_VERSION}/g" pyproject.toml
# cleanup sed backup
rm -r pyproject.toml?*
awk '/-{3,}/{flag=1;next}/Release/{if (flag==1)exit}flag' CHANGELOG.md > .changelog.md
"""
